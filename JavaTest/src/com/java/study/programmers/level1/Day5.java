package com.java.study.programmers.level1;

import java.util.Arrays;
import java.util.Scanner;

public class Day5 {

	Scanner sc = new Scanner(System.in);
	
	
	public void method01() {
//		3진법 뒤집기
//		제출 내역
//		문제 설명
//		자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.
//
//		제한사항
//		n은 1 이상 100,000,000 이하인 자연수입니다.
//		입출력 예
//		n	result
//		45	7
//		125	229
//		입출력 예 설명
//		입출력 예 #1
//
//		답을 도출하는 과정은 다음과 같습니다.
//		n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
//		45	1200	0021	7
//		따라서 7을 return 해야 합니다.
//		입출력 예 #2
//
//		답을 도출하는 과정은 다음과 같습니다.
//		n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
//		125	11122	22111	229
//		따라서 229를 return 해야 합니다.
		

		System.out.println("숫자를 정해주세요 : ");
		int n = sc.nextInt();
		
		String ternary = Integer.toString(n, 3); // 3진법 변환
        String reversedTernary = new StringBuilder(ternary).reverse().toString(); // 3진법으로 변환된 수를 뒤집음
        int answer = Integer.parseInt(reversedTernary, 3); // 뒤집힌 3진법 수를 다시 10진법으로 변환
        
        System.out.println(answer);
	}
	
	
	public void method02() {
		
//		예산
//		제출 내역
//		문제 설명
//		S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다.
//		그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.
//
//		물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며,
//		1,000원보다 적은 금액을 지원해 줄 수는 없습니다.
//
//		부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.
//
//		제한사항
//		d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
//		d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
//		budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.
//		입출력 예
//		d	budget	result
//		[1,3,2,5,4]	9	3
//		[2,2,3,3]	10	4
//		입출력 예 설명
//		입출력 예 #1
//		각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다.
//		항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.
//
//		1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.
//		1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
//		1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
//		1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.
//		3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다.
//
//		입출력 예 #2
//		모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다.

		int[] d = {1,3,2,5,4};
		int budget=9;
	    Arrays.sort(d); // 배열 d를 오름차순으로 정렬
        int answer = 0;
        for(int i = 0; i < d.length; i++) {
            if (budget - d[i] >= 0) {
                budget -= d[i]; // 예산에서 현재 부서의 요청 금액을 뺌
                answer++; // 지원할 수 있는 부서의 수를 증가
            } else {
                break; // 예산이 부족하면 반복문을 종료
            }
        System.out.println(answer);
        
        }
		
	}
	
	
	
}
